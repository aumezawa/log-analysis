#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../dist/server/app');
var atomic = require('../dist/server/lib/atomic');
var cluster = require('cluster');
var farmhash = require('farmhash');
var fs = require('fs');
var http = require('http');
var https = require('https');
var logger = require('../dist/server/lib/logger');
var net = require('net');
var path = require('path');
var terminal = require('../dist/server/routes/terminal');

/**
 * Get root directory.
 */

var rootPath = process.cwd();

/**
 * Get port.
 */

var http_port = app.get('http-port');
var https_port = app.get('https-port');

/**
 * Get number of workers.
 */

var num_wokers = app.get('num-workers');


/**
 * Cluster logic.
 */

if (cluster.isMaster) {

  logger.info(`master: now starting`)

  var workers = [];

  var createWorker = function(index) {
		workers[index] = cluster.fork();
    logger.info(`master: created a new worker[${ workers[index].process.pid }]`);

		workers[index].on('exit', function(code, signal) {
			logger.info(`master: respawning a worker ${ index }`);
			createWorker(index);
		});
  };

  /**
   * Create workers.
   */

  for (var index = 0; index < num_wokers; index++) {
		createWorker(index);
	}

  var getWorkerIndex = function(ip, len) {
		return farmhash.fingerprint32(ip) % len;
	};

  /**
   * Lister master servers.
   */

  var http_server = net.createServer({ pauseOnConnect: true }, function(connection) {
		var worker = workers[getWorkerIndex(connection.remoteAddress, num_wokers)];
		worker.send('sticky-session:http-connection', connection);
	}).listen(http_port);
  http_server.timeout = app.get('server-timeout')

  logger.info(`master: HTTP server is listening on port port ${ http_port }`)

  var https_server = net.createServer({ pauseOnConnect: true }, function(connection) {
		var worker = workers[getWorkerIndex(connection.remoteAddress, num_wokers)];
		worker.send('sticky-session:https-connection', connection);
	}).listen(https_port);
  https_server.timeout = app.get('server-timeout')

  logger.info(`master: HTTPS server is listening on port port ${ https_port }`)

  /**
   * Initialize IPC.
   */

  atomic.init()

} else {

  logger.info(`worker: now starting`)

  /**
   * Create HTTP/HTTPS server.
   */

  var http_server = http.createServer(app);
  http_server.timeout = app.get('server-timeout')

  var https_server = https.createServer({
    key : fs.readFileSync(path.join(rootPath, app.get('private-key-path'))),
    cert: fs.readFileSync(path.join(rootPath, app.get('certificate-path')))
  }, app);
  https_server.timeout = app.get('server-timeout')

  /**
   * Connect to Terminal.
   */

  terminal(http_server);
  terminal(https_server);

  /**
   * Handed off from master.
   */

  process.on('message', function(message, connection) {
    if (message === 'sticky-session:http-connection') {
      http_server.emit('connection', connection);
      connection.resume();
    }

    if (message === 'sticky-session:https-connection') {
      https_server.emit('connection', connection);
      connection.resume();
    }
	});

}
