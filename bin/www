#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../dist/server/app');
var debug = require('debug')('express:server');
var fs = require('fs');
var http = require('http');
var https = require('https');
var path = require('path');

/**
 * Get root directory.
 */

var rootpath = process.cwd();

/**
 * Get port.
 */

var http_port = app.get('http_port');
var https_port = app.get('https_port');

/**
 * Create HTTP/HTTPS server.
 */

var http_server = http.createServer(app);
var https_server = https.createServer({
  key : fs.readFileSync(path.join(rootpath, 'local', 'cert', 'server-key.pem')),
  cert: fs.readFileSync(path.join(rootpath, 'local', 'cert', 'server-cert.pem'))
}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

http_server.listen(http_port);
http_server.on('error', onErrorHttp);
http_server.on('listening', onListeningHttp);

https_server.listen(https_port);
https_server.on('error', onErrorHttps);
https_server.on('listening', onListeningHttps);

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof http_port === 'string'
    ? 'Pipe ' + http_port
    : 'Port ' + http_port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof https_port === 'string'
    ? 'Pipe ' + https_port
    : 'Port ' + https_port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListeningHttp() {
  var addr = http_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('HTTP server is listening on ' + bind);
}

function onListeningHttps() {
  var addr = https_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('HTTPS server is listening on ' + bind);
}
